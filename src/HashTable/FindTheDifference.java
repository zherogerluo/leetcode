/**
 * LeetCode #389, easy
 *
 * Given two strings s and t which consist of only lowercase letters.
 *
 * String t is generated by random shuffling string s and then add one more letter at a random position.
 *
 * Find the letter that was added in t.
 *
 * Example:
 *
 * Input:
 * s = "abcd"
 * t = "abcde"
 *
 * Output:
 * e
 *
 * Explanation:
 * 'e' is the letter that was added.
 */

package HashTable;

import java.util.*;

public class FindTheDifference {
    /**
     * Solution 1: Sorting
     *
     * Sort both strings and look for first char that mismatches that in s. Note that the length of t is one larger
     * than s, so be careful to check for index bound when looping through them.
     *
     * Time complexity: O(n * log(n)). Space complexity: O(n) or O(1) if the sorting is in-place.
     */
    class Solution1 {
        public char findTheDifference(String s, String t) {
            char[] cs1 = s.toCharArray();
            char[] cs2 = t.toCharArray();
            Arrays.sort(cs1);
            Arrays.sort(cs2);
            for (int i = 0; i < cs2.length; i++) {
                if (i == cs1.length || cs1[i] != cs2[i]) return cs2[i];
            }
            return ' ';
        }
    }

    /**
     * Solution 2: Hash map
     *
     * Use a hash map (or count array) to record count in s, and decrement count as we loop through t. Return the
     * char if we see a zero count.
     *
     * Time complexity: O(n). Space complexity: O(1).
     */
    class Solution2 {
        public char findTheDifference(String s, String t) {
            char[] cs1 = s.toCharArray();
            char[] cs2 = t.toCharArray();
            int[] count = new int[26];
            for (char c : cs1) count[c-'a'] += 1;
            for (char c : cs2) {
                if (count[c-'a'] == 0) return c;
                count[c-'a'] -= 1;
            }
            return ' ';
        }
    }

    /**
     * Solution 3: Bit manipulation
     *
     * s and t has only one single difference, which can be extracted using accumulated XOR operations. XOR all chars
     * in s and t, the same char pairs will get cancelled and what is left is the unique char.
     *
     * Time complexity: O(n). Space complexity: O(1).
     */
    class Solution3 {
        public char findTheDifference(String s, String t) {
            char[] cs1 = s.toCharArray();
            char[] cs2 = t.toCharArray();
            int res = 0;
            for (char c : cs1) res = res ^ c;
            for (char c : cs2) res = res ^ c;
            return (char) res;
        }
    }
}
